/*
 * Lagrello API
 *
 * API specification for Lagrello, a simple to use authentication service
 *
 * API version: 1.0.0
 * Contact: support@lagrello.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagrello-go

import (
	"encoding/json"
)

// TokenList struct for TokenList
type TokenList struct {
	Data []Token `json:"data"`
	Paging Paging `json:"paging"`
}

// NewTokenList instantiates a new TokenList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenList(data []Token, paging Paging) *TokenList {
	this := TokenList{}
	this.Data = data
	this.Paging = paging
	return &this
}

// NewTokenListWithDefaults instantiates a new TokenList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenListWithDefaults() *TokenList {
	this := TokenList{}
	return &this
}

// GetData returns the Data field value
func (o *TokenList) GetData() []Token {
	if o == nil {
		var ret []Token
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *TokenList) GetDataOk() (*[]Token, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *TokenList) SetData(v []Token) {
	o.Data = v
}

// GetPaging returns the Paging field value
func (o *TokenList) GetPaging() Paging {
	if o == nil {
		var ret Paging
		return ret
	}

	return o.Paging
}

// GetPagingOk returns a tuple with the Paging field value
// and a boolean to check if the value has been set.
func (o *TokenList) GetPagingOk() (*Paging, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Paging, true
}

// SetPaging sets field value
func (o *TokenList) SetPaging(v Paging) {
	o.Paging = v
}

func (o TokenList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	if true {
		toSerialize["paging"] = o.Paging
	}
	return json.Marshal(toSerialize)
}

type NullableTokenList struct {
	value *TokenList
	isSet bool
}

func (v NullableTokenList) Get() *TokenList {
	return v.value
}

func (v *NullableTokenList) Set(val *TokenList) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenList) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenList(val *TokenList) *NullableTokenList {
	return &NullableTokenList{value: val, isSet: true}
}

func (v NullableTokenList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


